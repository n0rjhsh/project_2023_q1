#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>

// Replace with your network credentials
const char* ssid = "norhanizajhsh";
const char* password = "sanzo143";

ESP8266WebServer server(80);   //instantiate server at port 80 (http port)

String page = "";
String text = "";

int led1 = 5; //D1
int led2 = 4; //D2
int echo = 14; //D5
int trig = 12; //D6
long duration;
int distance;
int data = 0;
int currentState = 0;
int previousState = 0;

void setup(void)
{
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(trig, OUTPUT); //ultrasonic trig pin
  pinMode(echo, INPUT); //ultrasonic echo pin
  delay(1000);
  Serial.begin(115200);
  WiFi.begin(ssid, password); //begin WiFi connection
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  server.on("/data.txt", []() {
    text = (String)data;
    server.send(200, "text/html", text);
  });
  server.on("/", []() {
    page = "<h1>Pancasains Interaction Counter</h1><h1>Frequency:</h1> <h1 id=\"data\">""</h1>\r\n";
    page += "<script>\r\n";
    page += "var x = setInterval(function() {loadData(\"data.txt\",updateData)}, 1000);\r\n";
    page += "function loadData(url, callback){\r\n";
    page += "var xhttp = new XMLHttpRequest();\r\n";
    page += "xhttp.onreadystatechange = function(){\r\n";
    page += " if(this.readyState == 4 && this.status == 200){\r\n";
    page += " callback.apply(xhttp);\r\n";
    page += " }\r\n";
    page += "};\r\n";
    page += "xhttp.open(\"GET\", url, true);\r\n";
    page += "xhttp.send();\r\n";
    page += "}\r\n";
    page += "function updateData(){\r\n";
    page += " document.getElementById(\"data\").innerHTML = this.responseText;\r\n";
    page += "}\r\n";
    page += "</script>\r\n";
    server.send(200, "text/html", page);
  });

  server.begin();
  Serial.println("Web server started!");
}

void blinking()
{
  digitalWrite(led1, HIGH);
  delay(100);
  digitalWrite(led1, LOW);
  delay(100);
  digitalWrite(led2, HIGH);
  delay(100);
  digitalWrite(led2, LOW);
  delay(100);
  digitalWrite(led1, HIGH);
  delay(100);
  digitalWrite(led1, LOW);
  delay(100);
  digitalWrite(led2, HIGH);
  delay(100);
  digitalWrite(led2, LOW);
  delay(100);
  digitalWrite(led1, HIGH);
  delay(100);
  digitalWrite(led1, LOW);
  delay(100);
  digitalWrite(led2, HIGH);
  delay(100);
  digitalWrite(led2, LOW);
  delay(100);
  digitalWrite(led1, HIGH);
  delay(100);
  digitalWrite(led1, LOW);
  delay(100);
  digitalWrite(led2, HIGH);
  delay(100);
  digitalWrite(led2, LOW);
  delay(100);
  digitalWrite(led1, HIGH);
  delay(100);
  digitalWrite(led1, LOW);
  delay(100);
  digitalWrite(led2, HIGH);
  delay(100);
  digitalWrite(led2, LOW);
  delay(100);
}

void ultrasonic()
{
  digitalWrite(trig, LOW); //ultrasonic trig pin
  delayMicroseconds(2);

  //ultrasonic trig pin
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);

  //ultrasonic echo pin
  duration = pulseIn(echo, HIGH); //measure duration
  distance = duration * 0.034 / 2; //calculate distance
  Serial.print("Distance: ");
  Serial.println(distance);
}

void fade()
{
  for (int fadeValue = 0 ; fadeValue <= 255; fadeValue += 5)
  {
    analogWrite(led1, fadeValue);
    analogWrite(led2, fadeValue);
    delay(10);
  }

  for (int fadeValue = 255 ; fadeValue >= 0; fadeValue -= 5)
  {
    analogWrite(led1, fadeValue);
    analogWrite(led2, fadeValue);
    delay(10);
  }
}

void loop(void)
{
  ultrasonic();
  Serial.println(distance);
  if (distance < 10)
  {
    currentState = 1;
    blinking();
  }
  else
  {
    currentState = 0;
    fade();
  }
  delay(200);
  if (currentState != previousState)
  {
    if (currentState == 1)
    {
      data = data + 1;
    }
  }
  server.handleClient();
}
